'use strict'

const balataConsts = require('./balataConsts')

const name = 'BackgroundZoom'
const properties = {
    hideOnStart: false,
    shouldDisableSmoothScrolling: true,
    getMaxTravel(elementMeasure, viewportHeight) {
        return viewportHeight + elementMeasure.height
    },
    groups: ['animation', 'background'],
    schema: {
        duration: {
            type: 'number',
            min: 0,
            default: 0
        },
        delay: {
            type: 'number',
            min: 0,
            default: 0
        },
        componentHeight: {
            type: 'number',
            min: 0,
            default: 1
        },
        viewPortHeight: {
            type: 'number',
            default: 1
        },
        speedFactor: {
            type: 'number',
            default: -0.8
        }
    }
}

function register({
    factory
}) {
    /**
     * Move balata media elements vertically and zoom(from y:0)
     * @param {Array<HTMLElement>} elements DOM elements to animate
     * @param {Number} [duration]
     * @param {Number} [delay]
     * @param {Object} [params] Timeline optional parameters (Tween values cannot be changed here, use BaseFade).
     * @param {Number} [componentHeight]
     * @param {Number} [viewPortHeight]
     * @param {Number} [speedFactor]
     * @param {boolean} [isSmoothScroll]
     * @returns {TimelineMax}
     */
    function animation(elements, duration, delay, {
        componentHeight = properties.schema.componentHeight.default,
        viewPortHeight = properties.schema.viewPortHeight.default,
        speedFactor = properties.schema.speedFactor.default,
        ...params
    } = {}) {
        const sequence = factory.sequence(params)

        elements.forEach(element => {
            const childrenToZoom = balataConsts.ZOOM_SELECTORS.map(selector => element.querySelector(selector))
                .filter(Boolean)

            const animateCallbacks = [factory.animate('BasePosition', childrenToZoom, duration, delay, {
                force3D: true,
                from: {
                    z: 0
                },
                to: {
                    z: 40
                },
                ease: 'Sine.easeIn',
                immediateRender: true
            })]

            if (params.isSmoothScroll) {
                animateCallbacks.unshift(factory.animate('BasePosition', element, duration, delay, {
                    from: {
                        perspectiveOrigin: `50% ${componentHeight / 2 + viewPortHeight * speedFactor}px`
                    }, // 50% + parallax.from
                    to: {
                        perspectiveOrigin: `50% ${componentHeight / 2 - componentHeight * speedFactor}px`
                    }, // 50% + parallax.to
                    ease: 'Linear.easeNone',
                    immediateRender: true
                }))
            }

            sequence.add([
                factory.animate('BasePosition', element, 0, delay, {
                    perspective: 100,
                    force3D: true,
                    immediateRender: true
                }),
                ...animateCallbacks
            ])
        })

        return sequence.get()
    }

    factory.registerAnimation(name, animation, properties)
}

module.exports = {
    name,
    properties,
    register
}