/* eslint-disable no-extra-parens */
'use strict'

const deg2rad = angleInDeg => angleInDeg * Math.PI / 180
const getMediaDimensions = (width, height) => ({
    width,
    height
})
const getFullHeightMedia = (width, height, screenHeight) => ({
    width,
    height: Math.max(height, screenHeight)
})

function getMaxRotateBounds(width, height, angleInDeg) {
    const angleInRad = deg2rad(angleInDeg)
    const radius = Math.hypot(width, height) / 2
    const travelAngle = Math.acos((width / 2) / radius)
    const boundingWidth = width * Math.abs(Math.cos(angleInRad)) + height * Math.abs(Math.sin(angleInRad))
    const boundingHeight = width * Math.abs(Math.sin(angleInRad)) + height * Math.abs(Math.cos(angleInRad))
    const minimalWidth = Math.ceil(angleInRad < travelAngle ? boundingWidth : radius * 2)
    const minimalHeight = Math.ceil(angleInRad < deg2rad(90) - travelAngle ? boundingHeight : radius * 2)

    return {
        width: minimalWidth,
        height: minimalHeight
    }
}

function getMaxSkewYBounds(width, height, angleInDeg) {
    const angleInRad = deg2rad(angleInDeg)
    return {
        width,
        height: width * Math.tan(angleInRad) + height
    }
}

const panSpeed = 0.2
const rotateAngle = 22
const skewAngle = 20
const zoomScale = 1.15

module.exports = {
    // Legacy
    BackgroundParallax: {
        hasParallax: true,
        getMediaDimensions: getFullHeightMedia
    },
    BackgroundParallaxZoom: {
        hasParallax: true,
        getMediaDimensions: getFullHeightMedia
    },
    BackgroundReveal: {
        hasParallax: true,
        getMediaDimensions: getFullHeightMedia
    },
    // New
    BgCloseUp: {
        getMediaDimensions
    },
    BgExpand: {
        getMediaDimensions
    },
    BgFabeBack: {
        getMediaDimensions
    },
    BgFadeIn: {
        getMediaDimensions
    },
    BgFadeOut: {
        getMediaDimensions
    },
    BgFake3D: {
        hasParallax: true,
        getMediaDimensions: getFullHeightMedia
    },
    BgPanLeft: {
        getMediaDimensions: (width, height) => ({
            width: width * (1 + panSpeed),
            height
        })
    },
    BgPanRight: {
        getMediaDimensions: (width, height) => ({
            width: width * (1 + panSpeed),
            height
        })
    },
    BgParallax: {
        hasParallax: true,
        getMediaDimensions: getFullHeightMedia
    },
    BgPullBack: {
        getMediaDimensions
    },
    BgReveal: {
        hasParallax: true,
        getMediaDimensions: getFullHeightMedia
    },
    BgRotate: {
        getMediaDimensions: (width, height) => getMaxRotateBounds(width, height, rotateAngle)
    },
    BgShrink: {
        getMediaDimensions
    },
    BgSkew: {
        getMediaDimensions: (width, height) => getMaxSkewYBounds(width, height, skewAngle)
    },
    BgUnwind: {
        getMediaDimensions
    },
    BgZoomIn: {
        hasParallax: true,
        getMediaDimensions: getFullHeightMedia
    },
    BgZoomOut: {
        getMediaDimensions: (width, height) => ({
            width: width * zoomScale,
            height: height * zoomScale
        })
    }
}