function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}

import {
    setCssVars,
    setStyle
} from '../../utils/domUtils';

function wixBgMediaWrapper(WixElement, services
    /*, environmentConsts*/
) {
    var stylesToClear = {
        width: undefined,
        height: undefined,
        left: undefined //top: undefined // TODO: for responsive bg scrub

    };

    var WixBgMedia = /*#__PURE__*/ function(_WixElement) {
        _inheritsLoose(WixBgMedia, _WixElement);

        function WixBgMedia() {
            // eslint-disable-line no-useless-constructor
            return _WixElement.call(this) || this;
        }

        var _proto = WixBgMedia.prototype;

        _proto.reLayout = function reLayout() {
            var _this = this;

            var _this$dataset = this.dataset,
                containerId = _this$dataset.containerId,
                pageId = _this$dataset.pageId,
                useCssVars = _this$dataset.useCssVars,
                bgEffectName = _this$dataset.bgEffectName;
            var container = document.getElementById("" + containerId);
            var page = document.getElementById("" + pageId);
            var measures = {};
            services.mutationService.measure(function() {
                // !! note isFixedStyle in edit mode is false although hasParallax is true
                //todo: remove window.getComputedStyle and use data-is-full-height (TB backlog)
                var isFixedStyle = window.getComputedStyle(_this).position === 'fixed';
                var screenHeight = document.documentElement.clientHeight;
                var containerRect = container.getBoundingClientRect();
                var pageRect = page.getBoundingClientRect();
                var dimensionsByEffect = services.getMediaDimensionsByEffect(bgEffectName, containerRect.width, containerRect.height, screenHeight);
                var hasParallax = dimensionsByEffect.hasParallax;
                var calculatedWith = dimensionsByEffect.width,
                    calculatedHeight = dimensionsByEffect.height;
                var width = calculatedWith + "px";
                var height = calculatedHeight + "px";
                var left = isFixedStyle ? containerRect.left - pageRect.left + "px" : (containerRect.width - calculatedWith) / 2 + "px";
                var top = isFixedStyle || hasParallax ? 0 : (containerRect.height - calculatedHeight) / 2 + "px"; // will be 0 if no effect

                var dimensions = !useCssVars ? {
                    width: width,
                    height: height,
                    left: left,
                    top: top
                } : {
                    '--containerW': width,
                    '--containerH': height,
                    '--containerL': left,
                    //'--containerT': top, // TODO: for responsive bg scrub
                    '--screenH_val': "" + screenHeight
                };
                Object.assign(measures, dimensions);
            });
            services.mutationService.mutate(function() {
                if (useCssVars) {
                    setStyle(_this, stylesToClear);
                    setCssVars(_this, measures);
                } else {
                    setStyle(_this, measures);
                }
            });
        };

        _proto.connectedCallback = function connectedCallback() {
            _WixElement.prototype.connectedCallback.call(this);

            services.windowResizeService.observe(this);
        };

        _proto.disconnectedCallback = function disconnectedCallback() {
            _WixElement.prototype.disconnectedCallback.call(this);

            services.windowResizeService.unobserve(this);
        };

        _proto.attributeChangedCallback = function attributeChangedCallback(name, oldValue) {
            if (oldValue) {
                this.reLayout();
            }
        };

        _createClass(WixBgMedia, null, [{
            key: "observedAttributes",
            get: function get() {
                return ['data-is-full-height', 'data-container-size'];
            }
        }]);

        return WixBgMedia;
    }(WixElement);

    return WixBgMedia;
}

export default wixBgMediaWrapper;
//# sourceMappingURL=wixBgMedia.js.map