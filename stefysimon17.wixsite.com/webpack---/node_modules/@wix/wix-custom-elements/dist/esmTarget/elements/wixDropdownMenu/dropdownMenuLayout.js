import {
    getData,
    setAttributes,
    setData,
    setStyle
} from '../../utils/domUtils';
import {
    findKey
} from '../../utils/utils';
var MORE_BUTTON_SUFFIX = '__more__';
var MORE_CONTAINER_PREFIX = 'moreContainer';

var getDropDownWidthIfOk = function getDropDownWidthIfOk(menuWidth, sameWidth, stretch, widths, menuWidthToReduce, maxWidth, removeMarginFromAllChildren, extraPixels) {
    // eslint-disable-line complexity
    menuWidth -= menuWidthToReduce * (removeMarginFromAllChildren ? widths.length : widths.length - 1);
    menuWidth -= extraPixels.left + extraPixels.right;

    if (sameWidth) {
        // width same width, all widths should be as the max width (calculated for the whole items in the calling method)
        widths = widths.map(function() {
            return maxWidth;
        });
    } // not first measure - want sizes without 0


    if (widths.some(function(v) {
            return v === 0;
        })) {
        return null;
    }

    var totalMenuItemsWidths = 0;
    var total = widths.reduce(function(a, b) {
        return a + b;
    }, 0);

    if (total > menuWidth) {
        // drop down should have less items
        return null;
    } // calculate the width of the items


    if (sameWidth) {
        if (stretch) {
            var width = Math.floor(menuWidth / widths.length);
            var stretchedAndSameItemWidths = widths.map(function() {
                return width;
            });
            totalMenuItemsWidths = width * widths.length;

            if (totalMenuItemsWidths < menuWidth) {
                var totalRemnant = Math.floor(menuWidth - totalMenuItemsWidths);
                widths.forEach(function(wdth, index) {
                    if (index <= totalRemnant - 1) {
                        stretchedAndSameItemWidths[index]++;
                    }
                });
            }

            return stretchedAndSameItemWidths;
        }

        return widths;
    } // not same width


    if (stretch) {
        var toAdd = Math.floor((menuWidth - total) / widths.length);
        totalMenuItemsWidths = 0;
        var stretchItemsWidths = widths.map(function(itemWidth) {
            totalMenuItemsWidths += itemWidth + toAdd;
            return itemWidth + toAdd;
        });

        if (totalMenuItemsWidths < menuWidth) {
            var remnant = Math.floor(menuWidth - totalMenuItemsWidths);
            widths.forEach(function(wdth, index) {
                if (index <= remnant - 1) {
                    stretchItemsWidths[index]++;
                }
            });
        }

        return stretchItemsWidths;
    }

    return widths;
};

var getMaxWidth = function getMaxWidth(widths) {
    return widths.reduce(function(a, b) {
        return a > b ? a : b;
    }, -Infinity);
};

var checkForMarginMenu = function checkForMarginMenu(itemsContainer) {
    var menuItem = itemsContainer.lastChild;
    var itemCss = window.getComputedStyle(menuItem);
    var marginLeft = parseInt(itemCss.marginLeft, 10) || 0;
    var marginRight = parseInt(itemCss.marginRight, 10) || 0;
    return marginLeft + marginRight;
};

var checkValidNumber = function checkValidNumber(num) {
    var number = parseFloat(num);
    return isFinite(number) ? number : 0;
};

var getDivExtraPixels = function getDivExtraPixels(itemsContainer, includeMargin) {
    var itemsContainerCss = window.getComputedStyle(itemsContainer);
    var top = checkValidNumber(itemsContainerCss.borderTopWidth) + checkValidNumber(itemsContainerCss.paddingTop);
    var bottom = checkValidNumber(itemsContainerCss.borderBottomWidth) + checkValidNumber(itemsContainerCss.paddingBottom);
    var left = checkValidNumber(itemsContainerCss.borderLeftWidth) + checkValidNumber(itemsContainerCss.paddingLeft);
    var right = checkValidNumber(itemsContainerCss.borderRightWidth) + checkValidNumber(itemsContainerCss.paddingRight);

    if (includeMargin) {
        top += checkValidNumber(itemsContainerCss.marginTop);
        bottom += checkValidNumber(itemsContainerCss.marginBottom);
        left += checkValidNumber(itemsContainerCss.marginLeft);
        right += checkValidNumber(itemsContainerCss.marginRight);
    }

    return {
        top: top,
        bottom: bottom,
        left: left,
        right: right,
        height: top + bottom,
        width: left + right
    };
};

var getViewportHeight = function getViewportHeight() {
    return window.innerHeight;
};

var needToOpenDropDownUp = function needToOpenDropDownUp(menuCompDom) {
    var menuClientRect = menuCompDom.getBoundingClientRect();
    var topRelativeToWindow = menuClientRect.top;
    return topRelativeToWindow > getViewportHeight() / 2;
};

var getLabelWidth = function getLabelWidth(labelNode) {
    return labelNode.getBoundingClientRect().width;
};

var calculateLineHeight = function calculateLineHeight(menuHeight, measures) {
    var lineHeight = menuHeight - measures.menuBorderY - measures.labelPad - measures.ribbonEls - measures.menuButtonBorder - measures.ribbonExtra;
    return lineHeight + "px";
};

var getMenuItemsToPresent = function getMenuItemsToPresent(id, measures, menuProperties, domNodes, menuItemsIdsWithMore) {
    var menuWidth = measures.width;
    measures.hasOriginalGapData = {};
    measures.originalGapBetweenTextAndBtn = {};
    var widths = menuItemsIdsWithMore.map(function(itemId) {
        var menuItem = domNodes[id + itemId];
        var gapBetweenTextAndBtn;
        var originalGap = getData(menuItem, 'originalGapBetweenTextAndBtn');

        if (originalGap === undefined) {
            measures.hasOriginalGapData[itemId] = false;
            gapBetweenTextAndBtn = measures.children[id + itemId].boundingClientRectWidth - measures.labelWidths[id + itemId + "label"];
            measures.originalGapBetweenTextAndBtn[id + itemId] = gapBetweenTextAndBtn;
        } else {
            measures.hasOriginalGapData[itemId] = true;
            gapBetweenTextAndBtn = parseFloat(originalGap);
        }

        if (measures.children[id + itemId].width > 0) {
            return Math.floor(measures.labelWidths[id + itemId + "label"] + gapBetweenTextAndBtn);
        }

        return 0;
    });
    var moreWidth = widths.pop();
    var sameWidth = menuProperties.sameWidthButtons;
    var stretch = menuProperties.stretchButtonsToMenuWidth;
    var moreShown = false;
    var menuWidthToReduce = measures.menuItemContainerMargins;
    var removeMarginFromAllChildren = measures.menuItemMarginForAllChildren;
    var extraPixels = measures.menuItemContainerExtraPixels; // check if it the menu can fit without "more"

    var maxWidth = getMaxWidth(widths);
    var realWidths = getDropDownWidthIfOk(menuWidth, sameWidth, stretch, widths, menuWidthToReduce, maxWidth, removeMarginFromAllChildren, extraPixels);

    if (!realWidths) {
        // find the menu with most items that work
        for (var i = 1; i <= widths.length; i++) {
            realWidths = getDropDownWidthIfOk(menuWidth, sameWidth, stretch, widths.slice(0, -1 * i).concat(moreWidth), menuWidthToReduce, maxWidth, removeMarginFromAllChildren, extraPixels);

            if (realWidths) {
                moreShown = true;
                break;
            }
        }

        if (!realWidths) {
            //found a case where the menu text was bigger then menu - more get the menu width
            moreShown = true;
            realWidths = [moreWidth];
        }
    }

    if (moreShown) {
        var widthMore = realWidths[realWidths.length - 1];
        realWidths = realWidths.slice(0, -1);

        while (realWidths.length < menuItemsIdsWithMore.length) {
            realWidths.push(0);
        }

        realWidths[realWidths.length - 1] = widthMore;
    }

    return {
        realWidths: realWidths,
        moreShown: moreShown
    };
};

var measureChildrenDimensions = function measureChildrenDimensions(id, measures, domNodes, childrenIdsToMeasure) {
    var childrenMeasures = {};
    childrenIdsToMeasure.forEach(function(childId) {
        var nodeId = "" + id + childId;
        var domNode = domNodes[nodeId];

        if (domNode) {
            childrenMeasures[nodeId] = {
                width: domNode.offsetWidth,
                boundingClientRectWidth: domNode.getBoundingClientRect().width,
                height: domNode.offsetHeight
            };
        }
    });
    return childrenMeasures;
};

var getDataIDs = function getDataIDs(rootNode) {
    var numItems = +getData(rootNode, 'numItems');

    if (numItems <= 0 || numItems > Number.MAX_SAFE_INTEGER) {
        return [];
    }

    return new Array(numItems).fill(0).map(function(num, i) {
        return String(i);
    });
};

var getChildrenIdsToMeasure = function getChildrenIdsToMeasure(menuItemIds) {
    return ['moreContainer', 'itemsContainer', 'dropWrapper'].concat(menuItemIds, [MORE_BUTTON_SUFFIX]);
};

var measure = function measure(id) {
    var measures = {};
    var domNodes = {};
    domNodes[id] = document.getElementById("" + id);
    var menuItemIds = getDataIDs(domNodes[id]);
    var childrenIdsToMeasure = getChildrenIdsToMeasure(menuItemIds);
    childrenIdsToMeasure.forEach(function(childId) {
        var domNodeId = "" + id + childId;
        domNodes[domNodeId] = document.getElementById("" + domNodeId);
    });
    measures.children = measureChildrenDimensions(id, measures, domNodes, childrenIdsToMeasure);
    var menuRoot = domNodes[id];
    var itemsContainer = domNodes[id + "itemsContainer"];
    var menuItems = itemsContainer.childNodes;
    var moreContainer = domNodes[id + "moreContainer"];
    var moreChildNodes = moreContainer.childNodes;
    var stretchButtonsToMenuWidth = getData(menuRoot, 'stretchButtonsToMenuWidth');
    var sameWidthButtons = getData(menuRoot, 'sameWidthButtons');
    /*add skin params to measure map*/

    var boundingClientRect = menuRoot.getBoundingClientRect();
    measures.absoluteLeft = boundingClientRect.left;
    measures.bodyClientWidth = document.body.clientWidth;
    measures.alignButtons = getData(menuRoot, 'dropalign');
    measures.hoverListPosition = getData(menuRoot, 'drophposition');
    measures.menuBorderY = parseInt(getData(menuRoot, 'menuborderY'), 10);
    measures.ribbonExtra = parseInt(getData(menuRoot, 'ribbonExtra'), 10);
    measures.ribbonEls = parseInt(getData(menuRoot, 'ribbonEls'), 10);
    measures.labelPad = parseInt(getData(menuRoot, 'labelPad'), 10);
    measures.menuButtonBorder = parseInt(getData(menuRoot, 'menubtnBorder'), 10);
    measures.menuItemContainerMargins = checkForMarginMenu(itemsContainer);
    measures.menuItemContainerExtraPixels = getDivExtraPixels(itemsContainer, true);
    measures.needToOpenMenuUp = needToOpenDropDownUp(menuRoot);
    measures.menuItemMarginForAllChildren = !stretchButtonsToMenuWidth || itemsContainer.getAttribute('data-marginAllChildren') !== 'false';
    measures.moreSubItem = [];
    measures.labelWidths = {};
    measures.linkIds = {};
    measures.parentId = {};
    measures.menuItems = {};
    measures.labels = {};
    moreChildNodes.forEach(function(moreChild, i) {
        measures.parentId[moreChild.id] = getData(moreChild, 'parentId');
        var dataId = getData(moreChild, 'dataId');
        measures.menuItems[dataId] = {
            dataId: dataId,
            parentId: getData(moreChild, 'parentId'),
            moreDOMid: moreChild.id,
            moreIndex: i
        };
        domNodes[moreChild.id] = moreChild;
        var labelNode = moreChild.querySelector('p');
        domNodes[labelNode.id] = labelNode;
        measures.labels[labelNode.id] = {
            width: labelNode.offsetWidth,
            height: labelNode.offsetHeight,
            left: labelNode.offsetLeft,
            lineHeight: parseInt(window.getComputedStyle(labelNode).fontSize, 10)
        };
        measures.moreSubItem.push(moreChild.id);
    });
    /*add menu items left to measure map + add the labels to nodes map*/

    menuItems.forEach(function(menuItem, i) {
        var dataId = getData(menuItem, 'dataId');
        measures.menuItems[dataId] = measures.menuItems[dataId] || {};
        measures.menuItems[dataId].menuIndex = i;
        measures.menuItems[dataId].menuDOMid = menuItem.id;
        measures.children[menuItem.id].left = menuItem.offsetLeft;
        var labelNode = menuItem.querySelector('p');
        domNodes[labelNode.id] = labelNode;
        measures.labelWidths[labelNode.id] = getLabelWidth(labelNode);
        var linkElementNode = menuItem.querySelector('p');
        domNodes[linkElementNode.id] = linkElementNode;
        measures.linkIds[menuItem.id] = linkElementNode.id;
    });
    var menuHeight = menuRoot.offsetHeight;
    measures.height = menuHeight;
    measures.width = menuRoot.offsetWidth;
    measures.lineHeight = calculateLineHeight(menuHeight, measures);
    var arrayWidths = getMenuItemsToPresent(id, measures, {
        sameWidthButtons: sameWidthButtons,
        stretchButtonsToMenuWidth: stretchButtonsToMenuWidth
    }, domNodes, menuItemIds.concat(MORE_BUTTON_SUFFIX));
    measures.realWidths = arrayWidths.realWidths;
    measures.isMoreShown = arrayWidths.moreShown;
    measures.menuItemIds = menuItemIds;
    measures.hoverState = getData(moreContainer, 'hover', false);
    return {
        measures: measures,
        domNodes: domNodes
    };
};

var setDropModeData = function setDropModeData(node, isUp) {
    return setData(node, {
        dropmode: isUp ? 'dropUp' : 'dropDown'
    });
};

var getLabelLineHeight = function getLabelLineHeight(moreItemLineHeight, measures) {
    return moreItemLineHeight + 15 + measures.menuBorderY + measures.labelPad + measures.menuButtonBorder;
};

var getMenuPosition = function getMenuPosition(menuExtraPixels, alignButtons, moreContainerWidth, menuWidth, hoveredListPosition, hoveredItem, menuLeft, menuRight, clientWidth) {
    var moreContainerLeft = '0px';
    var moreContainerRight = 'auto';
    var hoveredNodeLeftOffset = hoveredItem.left;
    var hoveredNodeWidthOffset = hoveredItem.width;

    if (alignButtons === 'left') {
        if (hoveredListPosition === 'left') {
            moreContainerLeft = 0;
        } else {
            moreContainerLeft = hoveredNodeLeftOffset + menuExtraPixels.left + "px";
        }
    } else if (alignButtons === 'right') {
        if (hoveredListPosition === 'right') {
            moreContainerRight = 0;
        } else {
            moreContainerRight = menuWidth - hoveredNodeLeftOffset - hoveredNodeWidthOffset - menuExtraPixels.right + "px";
        }

        moreContainerLeft = 'auto';
    } else if (hoveredListPosition === 'left') {
        //center
        moreContainerLeft = hoveredNodeLeftOffset + (hoveredNodeWidthOffset + menuExtraPixels.left - moreContainerWidth) / 2 + "px"; // eslint-disable-line no-mixed-operators
    } else if (hoveredListPosition === 'right') {
        moreContainerLeft = 'auto';
        moreContainerRight = (hoveredNodeWidthOffset + menuExtraPixels.right - (moreContainerWidth + menuExtraPixels.width)) / 2 + "px";
    } else {
        moreContainerLeft = menuExtraPixels.left + hoveredNodeLeftOffset + (hoveredNodeWidthOffset - (moreContainerWidth + menuExtraPixels.width)) / 2 + "px"; // eslint-disable-line no-mixed-operators
    }

    if (moreContainerLeft !== 'auto') {
        var subMenuLeft = menuLeft + parseInt(moreContainerLeft, 10);
        moreContainerLeft = subMenuLeft < 0 ? 0 : moreContainerLeft;
    }

    if (moreContainerRight !== 'auto') {
        var subMenuRight = menuRight - parseInt(moreContainerRight, 10);
        moreContainerRight = subMenuRight > clientWidth ? 0 : moreContainerRight;
    }

    return {
        moreContainerLeft: moreContainerLeft,
        moreContainerRight: moreContainerRight
    };
};

var decideOnMenuPosition = function decideOnMenuPosition(id, measures, hoveredItem, moreContainerWidth) {
    var width = measures.width,
        height = measures.height,
        alignButtons = measures.alignButtons,
        hoverListPosition = measures.hoverListPosition,
        menuItemContainerExtraPixels = measures.menuItemContainerExtraPixels;
    var menuLeft = measures.absoluteLeft;
    var menuRight = menuLeft + width;
    var menuPosition = getMenuPosition(menuItemContainerExtraPixels, alignButtons, moreContainerWidth, width, hoverListPosition, hoveredItem, menuLeft, menuRight, measures.bodyClientWidth);
    return {
        left: menuPosition.moreContainerLeft,
        right: menuPosition.moreContainerRight,
        top: measures.needToOpenMenuUp ? 'auto' : height + "px",
        bottom: measures.needToOpenMenuUp ? height + "px" : 'auto'
    };
};

var isNumber = function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
};

var updateDropDownContainerLocation = function updateDropDownContainerLocation(id, measures, domNodes, maxLabelWidth) {
    var hoverState = measures.hoverState;

    if (hoverState !== '-1') {
        var menuItemIds = measures.menuItemIds;
        var subItemsIndex = menuItemIds.indexOf(hoverState);

        if (isNumber(measures.hoverState) || hoverState === MORE_BUTTON_SUFFIX) {
            var measureMapRealWidths = measures.realWidths;

            if (!measureMapRealWidths) {
                return;
            }

            var moreContainerWidth = Math.max(maxLabelWidth, measures.children[subItemsIndex !== -1 ? id + subItemsIndex : id + MORE_BUTTON_SUFFIX].width); // more container width is the max between text width and the more btn width

            var moreItemLineHeight = measures.moreSubItem.length !== 0 ? measures.labels[measures.moreSubItem[0] + "label"].lineHeight : 0;
            var newSubItemsLineHeight = getLabelLineHeight(moreItemLineHeight, measures);
            /*set css for every menu item in the more container*/

            measures.moreSubItem.forEach(function(subId) {
                setStyle(domNodes[subId], {
                    minWidth: moreContainerWidth + "px"
                });
                setStyle(domNodes[subId + "label"], {
                    minWidth: '0px',
                    lineHeight: newSubItemsLineHeight + "px"
                });
            });
            /*set container position and decide if it's open up.down*/

            var hoveredInd = isNumber(measures.hoverState) ? measures.hoverState : '__more__';
            var hoveredItem = {
                width: measures.children[id + hoveredInd].width,
                left: measures.children[id + hoveredInd].left
            };
            var menuPosition = decideOnMenuPosition(id, measures, hoveredItem, moreContainerWidth);
            setStyle(domNodes["" + id + MORE_CONTAINER_PREFIX], {
                left: menuPosition.left,
                right: menuPosition.right
            });
            setStyle(domNodes[id + "dropWrapper"], {
                left: menuPosition.left,
                right: menuPosition.right,
                top: menuPosition.top,
                bottom: menuPosition.bottom
            });
        }
    }
};

var patchDropDownMenuItems = function patchDropDownMenuItems(id, domNodes, measures, menuItemsIdsWithMore) {
    var realWidths = measures.realWidths,
        menuHeight = measures.height,
        extraPixels = measures.menuItemContainerExtraPixels; // go over all the items (not the more)

    var totalVisible = 0;
    var lastVisibleMenuId = null;
    var innerLinkElementId = null;
    var menuLineHeight = measures.lineHeight;
    var menuItemHeight = menuHeight - extraPixels.height;

    for (var i = 0; i < menuItemsIdsWithMore.length; i++) {
        var activeWidth = realWidths[i];
        var isVisible = activeWidth > 0;
        var menuIndexOrMoreBecauseOfLegacyImplementation = menuItemsIdsWithMore[i];
        var menuId = id + menuIndexOrMoreBecauseOfLegacyImplementation;
        innerLinkElementId = measures.linkIds[menuId];

        if (isVisible) {
            totalVisible++;
            lastVisibleMenuId = menuId;
            setStyle(domNodes[menuId], {
                width: activeWidth + "px",
                height: menuItemHeight + "px",
                position: 'relative',
                'box-sizing': 'border-box',
                overflow: 'visible',
                visibility: 'inherit'
            });
            setStyle(domNodes[menuId + "label"], {
                'line-height': menuLineHeight
            });
            setAttributes(domNodes[menuId], {
                'aria-hidden': false
            });
        } else {
            setStyle(domNodes[menuId], {
                height: '0px',
                overflow: 'hidden',
                position: 'absolute',
                visibility: 'hidden'
            });
            setAttributes(domNodes[menuId], {
                'aria-hidden': true
            });
            setAttributes(domNodes[innerLinkElementId], {
                tabIndex: -1
            });
        }
    }

    if (totalVisible === 1) {
        setData(domNodes[id + "moreContainer"], {
            listposition: 'lonely'
        });
        setData(domNodes[lastVisibleMenuId], {
            listposition: 'lonely'
        });
    }
};

var patch = function patch(id, measures, domNodes) {
    setStyle(domNodes[id], {
        overflowX: 'visible'
    }); // measure widths to find out if there should be "more" and what would be the real widths
    // based on the comp properties

    var menuItemIds = measures.menuItemIds,
        needToOpenMenuUp = measures.needToOpenMenuUp;
    var menuItemsIdsWithMore = menuItemIds.concat(MORE_BUTTON_SUFFIX);
    setDropModeData(domNodes[id], needToOpenMenuUp);
    var maxLabelWidth = 0;

    if (measures.hoverState === MORE_BUTTON_SUFFIX) {
        //when hover more button - we render all item and hide the ones that already appear on the menu
        var firstIndexThatIsHidden = measures.realWidths.indexOf(0);
        var firstItemShownInMore = measures.menuItems[findKey(measures.menuItems, function(value) {
            return value.menuIndex === firstIndexThatIsHidden;
        })];
        var indexOfFirstItemShownInMore = firstItemShownInMore.moreIndex;
        var hasOneItem = indexOfFirstItemShownInMore === menuItemIds.length - 1;

        if (firstItemShownInMore.moreDOMid) {
            setAttributes(domNodes[firstItemShownInMore.moreDOMid], {
                'data-listposition': hasOneItem ? 'dropLonely' : 'top'
            });
        }

        Object.values(measures.menuItems).filter(function(menuItem) {
            return !!menuItem.moreDOMid;
        }).forEach(function(item) {
            if (item.moreIndex < indexOfFirstItemShownInMore) {
                setStyle(domNodes[item.moreDOMid], {
                    display: 'none'
                });
            } else {
                var moreItemLabelId = item.moreDOMid + "label";
                maxLabelWidth = Math.max(measures.labels[moreItemLabelId].width, maxLabelWidth);
            }
        });
    } else if (measures.hoverState) {
        measures.moreSubItem.forEach(function(v, i) {
            var subItemLabelId = id + MORE_CONTAINER_PREFIX + i + "label";
            maxLabelWidth = Math.max(measures.labels[subItemLabelId].width, maxLabelWidth);
        });
    }

    updateDropDownContainerLocation(id, measures, domNodes, maxLabelWidth);

    if (measures.originalGapBetweenTextAndBtn) {
        menuItemsIdsWithMore.forEach(function(item) {
            if (!measures.hasOriginalGapData[item]) {
                setData(domNodes["" + id + item], {
                    originalGapBetweenTextAndBtn: measures.originalGapBetweenTextAndBtn["" + id + item]
                });
            }
        });
    }

    patchDropDownMenuItems(id, domNodes, measures, menuItemsIdsWithMore);
};

export default {
    measure: measure,
    patch: patch
};
//# sourceMappingURL=dropdownMenuLayout.js.map