import {
    getDocumentScrollPosition,
    getScreenHeight,
    setAttributes,
    setCssVars,
    setStyle
} from '../../utils/domUtils';
import {
    getImageComputedProperties,
    getImageSrc
} from '../../utils/imageUtils';
import {
    get
} from '../../utils/utils'; // ImageX component uses cssVars for scrollEffect calculation.
// Values for some of these vars are set here

var COMP_HEIGHT_CSS_VAR = '--compH';
var COMP_TOP_CSS_VAR = '--top';
var SCROLL_CSS_VAR = '--scroll';

function getContainerStyle(opacity) {
    var style = {};

    if (typeof opacity === 'number') {
        style.opacity = opacity;
    }

    return style;
}

function getScrollEffectCssVars(measures) {
    var _ref;

    return _ref = {}, _ref[COMP_HEIGHT_CSS_VAR] = measures.height, _ref[COMP_TOP_CSS_VAR] = Math.ceil(measures.boundingRect.top) + measures.documentScroll, _ref[SCROLL_CSS_VAR] = measures.documentScroll, _ref;
}

function needScrollEffectCssVars(defaultScrollEffect, sourceSets) {
    if (sourceSets === void 0) {
        sourceSets = [];
    }

    var hasParallax = defaultScrollEffect === 'parallax' || sourceSets.some(function(sourceSet) {
        return sourceSet.scrollEffect === 'parallax';
    });
    return hasParallax;
}

function getImageHeight(measures, scrollEffect, parallaxSpeed) {
    if (parallaxSpeed === void 0) {
        parallaxSpeed = 1.5;
    }

    var heightForScrollEffect = {
        parallax: measures.height * parallaxSpeed,
        fixed: measures.screenHeight
    };
    return heightForScrollEffect[scrollEffect] || measures.height;
}

function getImageStyle(imageComputedProperties) {
    var imageCss = get(imageComputedProperties, ['css', 'img']);
    var objectFit = imageCss ? imageCss.objectFit : undefined; // do not set height, it would be set by css selector from outside

    return {
        width: '100%',
        // TODO: maybe should not be here, as height, set outside
        objectFit: objectFit
    };
}

function computeSourceSets(measures, imageInfo, envConsts, pictureNode) {
    var sourceSets = imageInfo.sourceSets;

    if (!sourceSets || !sourceSets.length) {
        return;
    }

    var imageInfoClone = JSON.parse(JSON.stringify(imageInfo));
    var parallaxSpeed = imageInfoClone.parallaxSpeed;
    sourceSets.forEach(function(sourceSet) {
        var sourceNode = pictureNode.querySelector("source[media='" + sourceSet.mediaQuery + "']");
        imageInfoClone.imageData.crop = sourceSet.crop;
        imageInfoClone.imageData.displayMode = sourceSet.displayMode;
        imageInfoClone.imageData.focalPoint = sourceSet.focalPoint;
        imageInfoClone.containerHeight = getImageHeight(measures, sourceSet.scrollEffect, parallaxSpeed);
        var imageComputedProperties = getImageComputedProperties(imageInfoClone, envConsts, 'img');
        setAttributes(sourceNode, {
            'data-srcset': get(imageComputedProperties, 'uri')
        });
    });
}

function measure(id, measures, domNodes) {
    var imageNode = domNodes.image;

    if (!imageNode) {
        return;
    }

    var imgSrc = getImageSrc(imageNode);
    measures.width = domNodes[id].offsetWidth;
    measures.height = domNodes[id].offsetHeight;
    measures.imgSrc = imgSrc;
    measures.screenHeight = getScreenHeight();
    measures.boundingRect = domNodes[id].getBoundingClientRect();
    measures.documentScroll = getDocumentScrollPosition();
}

function patch(id, measures, domNodes, imageInfo, services, envConsts, loadImage) {
    var imageData = imageInfo.imageData,
        parallaxSpeed = imageInfo.parallaxSpeed;
    var extendedImageInfo = Object.assign({}, imageInfo, {
        containerWidth: measures.width,
        containerHeight: getImageHeight(measures, imageData.scrollEffect, parallaxSpeed),
        displayMode: imageData.displayMode
    });
    var containerStyle = getContainerStyle(imageData.opacity);
    setStyle(domNodes[id], containerStyle);
    var imageComputedProperties = getImageComputedProperties(extendedImageInfo, envConsts, 'img');
    var src = get(imageComputedProperties, 'uri');
    setAttributes(domNodes[id], {
        'data-src': src
    });
    var needCssVars = needScrollEffectCssVars(imageData.scrollEffect, imageInfo.sourceSets);

    if (needCssVars) {
        // wixui.ImageX implements scroll effects by css variables. provide their values here
        setCssVars(domNodes[id], getScrollEffectCssVars(measures));
    }

    var imageStyle = getImageStyle(imageComputedProperties);
    setStyle(domNodes.image, imageStyle);

    if (domNodes.picture) {
        computeSourceSets(measures, extendedImageInfo, envConsts, domNodes.picture);
    } // clear initial indication that the image src came from first render (e.g. SSR)


    setAttributes(domNodes[id], {
        'data-has-ssr-src': ''
    });

    if (loadImage) {
        services.imageLoader.loadImage(domNodes[id], {
            screenHeight: measures.screenHeight,
            boundingRect: measures.boundingRect,
            withScrollEffectVars: needCssVars
        });
    }
}

export default {
    measure: measure,
    patch: patch
};
//# sourceMappingURL=imageLayoutResponsive.js.map