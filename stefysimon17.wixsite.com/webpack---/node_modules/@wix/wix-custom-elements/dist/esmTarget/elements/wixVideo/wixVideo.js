function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}

import videoLayout from './videoLayout';

function wixVideoWrapper(WixElement, services, environmentConsts) {
    var wixVideo = /*#__PURE__*/ function(_WixElement) {
        _inheritsLoose(wixVideo, _WixElement);

        function wixVideo() {
            // eslint-disable-line no-useless-constructor
            return _WixElement.call(this) || this;
        }

        var _proto = wixVideo.prototype;

        _proto.reLayout = function reLayout() {
            var _this = this;

            var _JSON$parse = JSON.parse(this.dataset.videoInfo),
                isVideoDataExists = _JSON$parse.isVideoDataExists,
                videoWidth = _JSON$parse.videoWidth,
                videoHeight = _JSON$parse.videoHeight,
                qualities = _JSON$parse.qualities,
                videoId = _JSON$parse.videoId,
                videoFormat = _JSON$parse.videoFormat,
                alignType = _JSON$parse.alignType,
                fittingType = _JSON$parse.fittingType,
                focalPoint = _JSON$parse.focalPoint,
                hasBgScrollEffect = _JSON$parse.hasBgScrollEffect,
                autoPlay = _JSON$parse.autoPlay,
                animatePoster = _JSON$parse.animatePoster,
                containerId = _JSON$parse.containerId,
                isEditorMode = _JSON$parse.isEditorMode,
                playbackRate = _JSON$parse.playbackRate,
                hasAlpha = _JSON$parse.hasAlpha;

            if (!isVideoDataExists) {
                return;
            }

            var autoPlayAllowed = !environmentConsts.prefersReducedMotion && autoPlay;
            var videoNode = this.querySelector("video[id^=\"" + containerId + "\"]");
            var poster = this.querySelector(".bgVideoposter[id^=\"" + containerId + "\"]"); // if observed for missing video/poster, first cleanup, otherwise it's a noop

            this.unobserveChildren();

            if (!(videoNode && poster)) {
                this.observeChildren(this);
                return;
            }

            var container = document.getElementById("" + containerId);
            var canvas = container.querySelector(".webglcanvas[id^=\"" + containerId + "\"]");
            var hasThunderBoltCanvas = hasAlpha || container.dataset.hasAlpha === 'true';

            if (hasThunderBoltCanvas && !canvas) {
                requestAnimationFrame(function() {
                    return _this.reLayout();
                });
                return;
            }

            services.mutationService.measure(function() {
                var measures = videoLayout.measure(videoNode, container, {
                    hasBgScrollEffect: hasBgScrollEffect,
                    videoWidth: videoWidth,
                    videoHeight: videoHeight,
                    fittingType: fittingType,
                    alignType: alignType,
                    qualities: qualities,
                    staticVideoUrl: environmentConsts.staticVideoUrl,
                    videoId: videoId,
                    videoFormat: videoFormat,
                    focalPoint: focalPoint
                });
                var videoSourceUrl = measures.videoSourceUrl,
                    needsSrcUpdate = measures.needsSrcUpdate,
                    videoStyle = measures.videoStyle;
                services.mutationService.mutate(function() {
                    videoLayout.mutate(poster, canvas, videoNode, videoStyle, autoPlayAllowed, videoSourceUrl, needsSrcUpdate, animatePoster, videoFormat, playbackRate, isEditorMode);
                });
            });
        };

        _proto.attributeChangedCallback = function attributeChangedCallback(name, oldValue) {
            if (oldValue) {
                this.reLayout();
            }
        };

        _createClass(wixVideo, null, [{
            key: "observedAttributes",
            get: function get() {
                return ['data-video-info'];
            }
        }]);

        return wixVideo;
    }(WixElement);

    return wixVideo;
}

export default wixVideoWrapper;
//# sourceMappingURL=wixVideo.js.map