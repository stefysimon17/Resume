import {
    getImageComputedProperties
} from '../../utils/imageUtils';
import {
    setStyle,
    getScreenHeight
} from '../../utils/domUtils';

function didImageChange(currentImageUrlCss, newUrl) {
    if (currentImageUrlCss === void 0) {
        currentImageUrlCss = '';
    }

    return !currentImageUrlCss.includes(newUrl) || !!currentImageUrlCss !== !!newUrl;
}

function setBackground(domNode, imageTransformData) {
    var elementStyleAndUrl = Object.assign({
        backgroundImage: "url(\"" + imageTransformData.uri + "\")"
    }, imageTransformData.css.container);
    var image = new Image();
    image.onload = setStyle.bind(null, domNode, elementStyleAndUrl);
    image.src = imageTransformData.uri;
}

function measure(id, measures, domNodes, _ref, services) {
    var containerId = _ref.containerId,
        bgEffectName = _ref.bgEffectName;
    var bgImage = domNodes[id];
    var container = domNodes[containerId];

    var _services$getMediaDim = services.getMediaDimensionsByEffect(bgEffectName, container.offsetWidth, container.offsetHeight, getScreenHeight()),
        width = _services$getMediaDim.width,
        height = _services$getMediaDim.height;

    measures.width = width;
    measures.height = height;
    measures.currentSrc = bgImage.style.backgroundImage;
    measures.bgEffectName = bgImage.dataset.bgEffectName;
}

function patch(id, measures, domNodes, imageInfo, envConsts) {
    var bgImage = domNodes[id];
    imageInfo.containerWidth = measures.width;
    imageInfo.containerHeight = measures.height;
    var imageTransformData = getImageComputedProperties(imageInfo, envConsts, 'bg');

    if (didImageChange(measures.currentSrc, imageTransformData.uri)) {
        setBackground(bgImage, imageTransformData);
    } else {
        setStyle(bgImage, imageTransformData.css.container);
    }
}

export default {
    measure: measure,
    patch: patch
};
//# sourceMappingURL=bgImageLayout.js.map