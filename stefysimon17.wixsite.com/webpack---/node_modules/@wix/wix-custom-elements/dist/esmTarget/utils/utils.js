var get = function get(obj, props, defVal) {
    var path = Array.isArray(props) ? props : props.split('.');
    var val = path.reduce(function(subObj, prop) {
        return subObj && subObj[prop] !== undefined ? subObj[prop] : null;
    }, obj);
    return val !== null ? val : defVal;
};

var pick = function pick(obj, props) {
    var propsArr = Array.isArray(props) ? props : [props];
    return propsArr.reduce(function(subObj, prop) {
        var _Object$assign;

        var val = get(obj, prop);
        return val !== undefined ? Object.assign(subObj, (_Object$assign = {}, _Object$assign[prop] = val, _Object$assign)) : subObj;
    }, {});
};

var findKey = function findKey(obj, predicate) {
    return Object.keys(obj).find(function(key) {
        return predicate(obj[key], key);
    });
};
/**
 * Return a unique Array from the input `arr` keeping the last item for each key
 * returned by `predicate(item)`
 *
 * @param {Array} arr
 * @param {function} predicate
 * @returns {Array}
 */


var unique = function unique(arr, predicate) {
    var result = arr.reduce(function(acc, item) {
        acc[predicate(item)] = item;
        return acc;
    }, {});
    return Object.values(result);
};

var cssStringToObject = function cssStringToObject(styleStr) {
    if (!styleStr || !styleStr.split) {
        return {};
    }

    return styleStr.split(';').reduce(function(ruleMap, ruleString) {
        var rulePair = ruleString.split(':');

        if (rulePair[0] && rulePair[1]) {
            ruleMap[rulePair[0].trim()] = rulePair[1].trim();
        }

        return ruleMap;
    }, {});
};
/**
 * @param {Function} callback
 * @returns {Function}
 */


var throttleToAnimationFrame = function throttleToAnimationFrame(callback) {
    var throttled = false;
    return function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        if (!throttled) {
            throttled = true;
            requestAnimationFrame(function() {
                throttled = false;
                callback.apply(void 0, args);
            });
        }
    };
};
/**
 * Join strings to a valid URL.
 *
 * {@see santa-core/santa-core-utils/src/coreUtils/core/urlUtils.js}
 * @param {...string[]} args
 * @return {string}
 */


function joinURL() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
    }

    var url = args[0];

    for (var i = 1; i < args.length; ++i) {
        url = url.replace(/\/$/, '') + "/" + args[i].replace(/^\//, '');
    }

    return url;
}

export {
    get,
    pick,
    findKey,
    unique,
    cssStringToObject,
    throttleToAnimationFrame,
    joinURL
};
//# sourceMappingURL=utils.js.map