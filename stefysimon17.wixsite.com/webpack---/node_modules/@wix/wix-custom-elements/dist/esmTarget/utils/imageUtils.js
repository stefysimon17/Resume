import {
    get,
    pick
} from './utils';
import imageClientApi from '@wix/image-client-api/dist/imageClientApi';

var getImageComputedProperties = function getImageComputedProperties(imageInfo, envConsts, htmlTag) {
    //todo: CLNT-5323 , wixapp sildergallery proxy is generating image data without uri
    if (!imageInfo.containerWidth || !imageInfo.containerHeight || !imageInfo.imageData.uri) {
        return {
            uri: '',
            css: {}
        };
    }

    var imageData = imageInfo.imageData;
    var fittingType = imageInfo.displayMode || imageClientApi.fittingTypes.SCALE_TO_FILL;
    var imageOptions = Object.assign(pick(imageData, 'upscaleMethod'), pick(imageInfo, 'filters'), imageInfo.quality || imageData.quality);
    var devicePixelRatioFromData = get(imageInfo.imageData, 'devicePixelRatio', envConsts.devicePixelRatio);
    var devicePixelRatio = getDevicePixelRatio(devicePixelRatioFromData);
    var src = Object.assign(pick(imageData, ['width', 'height', 'crop', 'name', 'focalPoint']), {
        id: imageData.uri
    });
    var target = {
        width: imageInfo.containerWidth,
        height: imageInfo.containerHeight,
        htmlTag: htmlTag || 'img',
        pixelAspectRatio: devicePixelRatio,
        alignment: imageInfo.alignType || imageClientApi.alignTypes.CENTER
    };
    var imageComputedProperties = imageClientApi.getData(fittingType, src, target, imageOptions);
    imageComputedProperties.uri = getMediaUrlByContext(imageComputedProperties.uri, envConsts.staticMediaUrl, envConsts.mediaRootUrl);
    return imageComputedProperties;
};

var getMediaUrlByContext = function getMediaUrlByContext(imageUri, staticMediaUrl, mediaRootUrl) {
    var isExternalUrl = /(^https?)|(^data)|(^blob)|(^\/\/)/.test(imageUri);

    if (isExternalUrl) {
        return imageUri;
    }

    var path = staticMediaUrl + "/";

    if (imageUri) {
        if (/^micons\//.test(imageUri)) {
            path = mediaRootUrl;
        } else if (/[^.]+$/.exec(imageUri)[0] === 'ico') {
            //if the image is an icon then it's taken from a slightly different place
            path = path.replace('media', 'ficons');
        }
    }

    return path + imageUri;
};

var getDevicePixelRatio = function getDevicePixelRatio(devicePixelRatio) {
    //we should be able to force devicePixelRatio from url by using the query param -
    var queryParams = window.location.search.split('&').map(function(query) {
        return query.split('=');
    });
    var devicePixelRatioQueryParam = queryParams.find(function(query) {
        return query[0].toLowerCase().includes('devicepixelratio');
    });
    var devicePixelRatioValueForceFromUrl = devicePixelRatioQueryParam ? Number(devicePixelRatioQueryParam[1]) : null;
    return devicePixelRatioValueForceFromUrl || devicePixelRatio || 1;
};

var getImageSrc = function getImageSrc(imageNode, isSvgImage) {
    return imageNode.getAttribute(isSvgImage ? 'xlink:href' : 'src');
};

function getMaskBBox(svgNode) {
    if (svgNode) {
        var type = svgNode.dataset.type;

        if (type && type !== 'ugc') {
            var dataBBox = svgNode.dataset.bbox;

            if (!dataBBox) {
                var _svgNode$getBBox = svgNode.getBBox(),
                    x = _svgNode$getBBox.x,
                    y = _svgNode$getBBox.y,
                    width = _svgNode$getBBox.width,
                    height = _svgNode$getBBox.height;

                return x + " " + y + " " + width + " " + height;
            }
        }
    }

    return null;
} //todo: temp experiments for measuring purposes, should be removed after test results


function shouldStopImageLoad(services) {
    return services.isExperimentOpen('specs.thunderbolt.tb_stop_client_images') || services.isExperimentOpen('specs.thunderbolt.final_force_webp') || services.isExperimentOpen('specs.thunderbolt.final_force_no_webp');
}

export {
    shouldStopImageLoad,
    getImageComputedProperties,
    getImageSrc,
    getMaskBBox
};
//# sourceMappingURL=imageUtils.js.map