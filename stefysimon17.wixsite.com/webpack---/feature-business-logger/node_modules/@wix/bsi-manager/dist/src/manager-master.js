"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var cookie_storage_1 = require("./storage/cookie-storage");
var config_storage_1 = require("./storage/config-storage");
var utils_1 = require("./lib/utils");
var MasterBsiManager = /** @class */ (function() {
    function MasterBsiManager() {
        this.delta = 1;
        this.basePageNumber = 1;
        this.initialized = false;
    }
    MasterBsiManager.create = function(api) {
        return new MasterBsiManager().init(api);
    };
    MasterBsiManager.prototype.newSession = function(pageNumber, bsi) {
        if (bsi === void 0) {
            bsi = this.api.genGuid();
        }
        this.delta = pageNumber;
        this.basePageNumber = 1;
        return {
            bsi: bsi,
            pageNumber: pageNumber,
        };
    };
    MasterBsiManager.prototype.sessionFromCookie = function(pageNumber, cookie) {
        if (!cookie) {
            return null;
        }
        var _a = ("" + cookie).split('|'),
            bsi = _a[0],
            pn = _a[1];
        return {
            bsi: bsi,
            pageNumber: pageNumber,
            cookiePageNumber: parseInt(pn, 10) || 1,
        };
    };
    MasterBsiManager.prototype.extend = function(_a) {
        var _this = this;
        var bsi = _a.bsi,
            pageNumber = _a.pageNumber;
        var bsiString = bsi + "|" + (this.basePageNumber + pageNumber - this.delta);
        var res = this.cookie.set(bsiString);
        // Update local commonConfig and trigger subscribers in slaves
        if (res.bsi !== this.bsiString) {
            this.config.set(res.bsi);
            this.bsiString = res.bsi;
        }
        clearTimeout(this.timeout);
        if (res.ttl) {
            // Simulate activity after the cookie expires so we always have a valid bsi value
            this.timeout = setTimeout(function() {
                return _this.extend(_this.newSession(pageNumber));
            }, res.ttl);
        }
        return res.bsi;
    };
    MasterBsiManager.prototype.getAndExtend = function(pageNumber) {
        if (pageNumber === void 0) {
            pageNumber = 1;
        }
        var session = this.sessionFromCookie(pageNumber, this.cookie.get() || this.config.get());
        if (!this.initialized && session) {
            this.basePageNumber = session.cookiePageNumber;
        }
        return this.extend(session || this.newSession(pageNumber));
    };
    MasterBsiManager.prototype.init = function(api) {
        utils_1.validateExternalApi(api, 'genGuid', 'getCommonConfig');
        this.api = api;
        this.config = new config_storage_1.ConfigStorage(this.api.getConsentPolicy, this.api.getCommonConfig);
        this.cookie = new cookie_storage_1.CookieStorage(this.config, this.api.getCookieReaderWriter);
        this.getAndExtend();
        this.initialized = true;
        return this;
    };
    MasterBsiManager.prototype.destroy = function() {
        clearTimeout(this.timeout);
    };
    MasterBsiManager.prototype.getBsi = function(pageNumber) {
        if (pageNumber === void 0) {
            pageNumber = 1;
        }
        if (!this.initialized) {
            throw new Error('bsiManager: please call init() first');
        }
        return this.getAndExtend(pageNumber);
    };
    return MasterBsiManager;
}());
exports.MasterBsiManager = MasterBsiManager;
//# sourceMappingURL=manager-master.js.map