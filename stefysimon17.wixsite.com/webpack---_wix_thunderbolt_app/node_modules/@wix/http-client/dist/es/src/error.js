import {
    __extends
} from "tslib";
import {
    requestIdOrEmptyString
} from './headers';
export var axiosErrorFields = [
    'code',
    'stack',
    'config',
    'request',
    'response',
    'toJSON',
    '__CANCEL__',
];
var HttpError = /** @class */ (function(_super) {
    __extends(HttpError, _super);

    function HttpError(error) {
        var _this = _super.call(this, error.message) || this;
        Object.setPrototypeOf(_this, HttpError.prototype);
        axiosErrorFields.forEach(function(key) {
            // index is type checked, but converting into 'any' as suggested in Typescript issues.
            _this[key] = error[key];
        });
        return _this;
    }
    Object.defineProperty(HttpError.prototype, "requestId", {
        get: function() {
            return requestIdOrEmptyString(this.response);
        },
        enumerable: false,
        configurable: true
    });
    return HttpError;
}(Error));
export {
    HttpError
};
//# sourceMappingURL=error.js.map