import {
    __assign
} from "tslib";
import {
    composeHeaders
} from './headers';
import {
    ORIGINAL_HOST_HEADER,
    ORIGINAL_URL_HEADER
} from './constants';
import {
    changeHost,
    extractHost,
    isAbsoluteUrl,
    toSearchQueryParams,
} from './utils';
export var buildOptions = function(requestOptions, host, wixHeadersOpts, globalConfig) {
    var _a;
    if (globalConfig === void 0) {
        globalConfig = {
            httpMockServer: {
                enabled: false,
            },
        };
    }
    var url = requestOptions.url,
        params = requestOptions.params,
        disableWixHeaders = requestOptions.disableWixHeaders,
        orgHeaders = requestOptions.headers;
    if (params) {
        if (typeof params !== 'object') {
            throw new Error('Search params must be an object');
        }
    }
    var composedHeaders = composeHeaders({
        url: url,
        disableWixHeaders: disableWixHeaders,
        wixHeadersOpts: wixHeadersOpts,
    });
    var localConfigOptions = maybeRedirectToMockServer(url, globalConfig);
    var originalUrlHeader = globalConfig.httpMockServer.enabled ?
        (_a = {},
            _a[ORIGINAL_URL_HEADER] = buildUrlFromRequest(url, params),
            _a[ORIGINAL_HOST_HEADER] = isAbsoluteUrl(url) ? extractHost(url) : host,
            _a) : {};
    var newOptions = __assign(__assign(__assign({}, requestOptions), localConfigOptions), {
        headers: __assign(__assign(__assign({}, composedHeaders), orgHeaders), originalUrlHeader)
    });
    return newOptions;
};

function maybeRedirectToMockServer(url, globalConfig) {
    if (globalConfig.httpMockServer.enabled) {
        var mockUrl = new URL(globalConfig.httpMockServer.mockServerUrl);
        return {
            url: changeHost(url, mockUrl.host),
        };
    }
    return {};
}

function buildUrlFromRequest(url, requestParams) {
    var _a = new URL(url, 'http://unused.com'),
        pathname = _a.pathname,
        searchParams = _a.searchParams;
    requestParams = requestParams || searchParams;
    if (requestParams) {
        var params = toSearchQueryParams(requestParams) || requestParams.toString();
        var paramsAsString = params ? "?" + params : '';
        return "" + pathname + paramsAsString;
    }
    return pathname;
}
//# sourceMappingURL=options.js.map